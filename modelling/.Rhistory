set.seed(1234)
# Chunk 19
boot2 <- boot(NY8$Cases, statistic = MoranI.pboot,
R=999, sim = "parametric", ran.gen = CR,
listw = lw_B, n = length(Ny8$Cases), S0 = Szero(lw_B),
mle = rni)
# Chunk 20
moran.plot(NY8$Cases, listw = nb2listw(NY_nb, style = "C"))
# Chunk 21
nylm <- lm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8)
summary(nylm)
NY8$lmresid <- residuals(nylm)
# Chunk 22
NYlistw <- nb2listw(NY_nb, style = "B")
lm.morantest(nylm, NYlistw)
# Chunk 23
NYlistwW <- nb2listw(NY_nb, style = "W")
aple(residuals(nylm), listw = NYlistwW)
spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
listw = NYlistwW)$lambda
# Chunk 24
NYlistw <- nb2listw(NY_nb, style = "B")
nysar <- spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
listw = NYlistw)
summary(nysar)
# Chunk 25
NY8$POP8
nylmw <- lm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
weights = POP8)
summary(nylmw) # more significant
lm.morantest(nylmw, NYlistw)
# Chunk 26
nysarw <- spatialreg::spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
listw = NYlistw, weights = POP8)
summary(nysarw) # AIC more lower
summary(nysar)
# Chunk 27
nycar <- spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
family = "CAR", listw = NYlistw)
summary(nycar)
nycarw <- spatialreg::spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
family = "CAR", listw = NYlistw, weights = POP8)
summary(nycarw)
# Chunk 28
nysarwM <- spatialreg::spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
family = "SAR", listw = NYlistw, weights = POP8,
method = "Matrix")
summary(nysarwM)
# Chunk 29
1/range(spatialreg::eigenw(NYlistw))
nysar_11 <- spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
family = "SAR", listw = NYlistw, llprof = 100)
# Chunk 30
nysmaw <- spatialreg::spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
family = "SMA", listw = NYlistw, weights = POP8)
summary(nysmaw)
# Chunk 31
nymix <- spatialreg::lagsarlm(Z ~ PEXPOSURE + PCTAGE65P + PCTOWNHOME, data = NY8,
listw = NYlistw, type = "mixed")
nymix
resMCMC <- spatialreg::MCMCsamp(nysar, listw = NYlistw, mcmc = 5000, burnin = 500)
plot(resMCMC)
setwd("C:/Users/joych/Desktop/SS/SpatialStat20/ASDA/ch9")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
knitr::opts_knit$set(root.dir ="C:/Users/joych/Desktop/SS/SpatialStat20/ASDA/ch9")
# Chunk 3
library(spdep)
library(rgdal)
NY8 <- readOGR("C:/Users/joych/Desktop/SS/SpatialStat20/ASDA/ch9","NY8_utm18")
NY_nb <- read.gal("NY_nb.gal", region.id = row.names(NY8))
summary(NY_nb)
# Chunk 4
plot(NY8, border = "grey60")
plot(NY_nb, coordinates(NY8), pch = 19, cex = 0.6, add = TRUE)
# Chunk 5
Syracuse <- NY8[NY8$AREANAME == "Syracuse city",]
Sy0_nb <- subset(NY_nb, NY8$AREANAME == "Syracuse city")
summary(Sy0_nb)
# Chunk 6
coords <- coordinates(Syracuse)
IDs <- row.names(Syracuse)
Sy8_nb <-knn2nb(knearneigh(coords, k=1), row.names = IDs)
Sy9_nb <-knn2nb(knearneigh(coords, k=2), row.names = IDs)
Sy10_nb <-knn2nb(knearneigh(coords, k=4), row.names = IDs)
dsts <- unlist(nbdists(Sy8_nb, coords))
Sy11_nb <-dnearneigh(coords, d1 = 0, d2 = 0.75*max(dsts), row.names = IDs)
# 154, 168 no neighborhoods
# Chunk 7
Sy0_lw_W <- nb2listw(Sy0_nb)
names(Sy0_lw_W)
Sy0_lw_W$weights[2]
names(attributes(Sy0_lw_W))
# Chunk 8
# card: cardinality, # of neighbors
1/rev(range(card(Sy0_lw_W$neighbours)))
# 0.11111, 1.0
summary(unlist(Sy0_lw_W$weights))
summary(sapply(Sy0_lw_W$weights, sum))
# all sums are 1
# Chunk 9
Sy0_lw_B <- nb2listw(Sy0_nb, style = "B")
summary(unlist(Sy0_lw_B$weights))
summary(sapply(Sy0_lw_B$weights, sum))
# Chunk 10
dsts <- nbdists(Sy0_nb, coordinates(Syracuse))
idw <- lapply(dsts, function(x) 1/(x/1000)) # inverse 계산
Sy0_lw_idwB <- nb2listw(Sy0_nb, glist = idw, style = "B")
summary(unlist(Sy0_lw_idwB$weights))
summary(sapply(Sy0_lw_idwB$weights, sum))
# Chunk 11
Sy0_lw_D1 <- nb2listw(Sy11_nb, style = "B")
Sy0_lw_D1 <- nb2listw(Sy11_nb, style = "B", zero.policy = TRUE)
print(Sy0_lw_D1, zero.policy = TRUE)
# Chunk 12
library(Matrix)
library(spatialreg)
sum(as_dgRMatrix_listw(Sy0_lw_W)[61,])
# Chunk 13
set.seed(987654)
n <- length(Sy0_nb)
uncorr_x <- rnorm(n)
rho <- 0.5
autocorr_x <- invIrW(Sy0_lw_W, rho) %*% uncorr_x
# Chunk 14
moran_u <- moran.test(uncorr_x, listw = Sy0_lw_W)
moran_a <- moran.test(autocorr_x, listw = Sy0_lw_W)
moran_a1 <- moran.test(autocorr_x, listw = nb2listw(Sy9_nb, style = "W"))
# Chunk 15
moran.test(NY8$Cases, listw = nb2listw(NY_nb))
lw_B <- nb2listw(NY_nb, style = "B")
moran.test(NY8$Cases, listw = nb2listw(NY_nb, style = "B"))
lm.morantest(lm(Cases ~ 1, NY8), listw = lw_B) # same
# Chunk 16
lm.morantest.sad(lm(Cases ~ 1, NY8), listw = lw_B)
lm.morantest.exact(lm(Cases ~ 1, NY8), listw = lw_B)
# Chunk 17
set.sed(1234)
bperm <- moran.mc(NY8$Cases, listw = lw_B, nsim = 99)
# Chunk 18
r <- sum(NY8$Cases)/sum(NY8$POP8)
rni <- r * NY8$POP8
CR <- function(var, mle) rpois(length(var), lambda = mle)
MoranI.pboot <- function(var, i, listw, n, S0, ...) {
return(moran(x = var, listw = listw, n=n, S0=S0)$I)
}
set.seed(1234)
# Chunk 19
boot2 <- boot(NY8$Cases, statistic = MoranI.pboot,
R=999, sim = "parametric", ran.gen = CR,
listw = lw_B, n = length(Ny8$Cases), S0 = Szero(lw_B),
mle = rni)
# Chunk 20
moran.plot(NY8$Cases, listw = nb2listw(NY_nb, style = "C"))
# Chunk 21
nylm <- lm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8)
summary(nylm)
NY8$lmresid <- residuals(nylm)
# Chunk 22
NYlistw <- nb2listw(NY_nb, style = "B")
lm.morantest(nylm, NYlistw)
# Chunk 23
NYlistwW <- nb2listw(NY_nb, style = "W")
aple(residuals(nylm), listw = NYlistwW)
spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
listw = NYlistwW)$lambda
# Chunk 24
NYlistw <- nb2listw(NY_nb, style = "B")
nysar <- spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
listw = NYlistw)
summary(nysar)
# Chunk 25
NY8$POP8
nylmw <- lm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
weights = POP8)
summary(nylmw) # more significant
lm.morantest(nylmw, NYlistw)
# Chunk 26
nysarw <- spatialreg::spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
listw = NYlistw, weights = POP8)
summary(nysarw) # AIC more lower
summary(nysar)
# Chunk 27
nycar <- spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
family = "CAR", listw = NYlistw)
summary(nycar)
nycarw <- spatialreg::spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
family = "CAR", listw = NYlistw, weights = POP8)
summary(nycarw)
# Chunk 28
nysarwM <- spatialreg::spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
family = "SAR", listw = NYlistw, weights = POP8,
method = "Matrix")
summary(nysarwM)
# Chunk 29
1/range(spatialreg::eigenw(NYlistw))
nysar_11 <- spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
family = "SAR", listw = NYlistw, llprof = 100)
# Chunk 30
nysmaw <- spatialreg::spautolm(Z ~ NY8$PEXPOSURE + NY8$PCTAGE65P + NY8$PCTOWNHOME, data = NY8,
family = "SMA", listw = NYlistw, weights = POP8)
summary(nysmaw)
# Chunk 31
nymix <- spatialreg::lagsarlm(Z ~ PEXPOSURE + PCTAGE65P + PCTOWNHOME, data = NY8,
listw = NYlistw, type = "mixed")
nymix
resMCMC <- spatialreg::MCMCsamp(nysar, listw = NYlistw, mcmc = 5000, burnin = 500)
plot(resMCMC)
install.packages("MODISTools")
#install.packages("MODISTools")
library("MODISTools")
# download data
subset <- mt_subset(product = "MOD11A2",
lat = 40,
lon = -110,
band = "LST_Day_1km",
start = "2004-01-01",
end = "2004-02-01",
km_lr = 1,
km_ab = 1,
site_name = "testsite",
internal = TRUE,
progress = FALSE)
print(str(subset))
# create data frame with a site_name, lat and lon column
# holding the respective names of sites and their location
df <- data.frame("site_name" = paste("test",1:2))
df$lat <- 40
df$lon <- -110
# test batch download
subsets <- mt_batch_subset(df = df,
product = "MOD11A2",
band = "LST_Day_1km",
internal = TRUE,
start = "2004-01-01",
end = "2004-02-01")
View(df)
subsets
View(subsets)
View(subset)
products <- mt_products()
head(products)
View(products)
bands <- mt_bands(product = "MOD11A2")
head(bands)
bands
View(bands)
mt_to_raster(subset)
library(c("raster", "sp"))
install.packages("MODIS")
library(raster) ; library(sp) ; library(MODIS)
loc <- c(37.27170295537566, 126.98836171933276)
loc
setwd("C:/Users/joych/Desktop/SS/SpatialStat20/modelling")
knitr::opts_knit$set(root.dir ="C:/Users/joych/Desktop/SS/SpatialStat20/modelling")
library(raster) ; library(sp) ; library(MODIS) ; library(MODISTools)
products <- mt_products()
head(products)
products
products$product
products
View(products)
MOD13Q1
library(ggplot2)
library(sf)
library(ggrepel)
loc
print(loc)
print(loc, 5)
print(loc, 10)
print(loc, Inf)
print(loc, 15)
print(loc, 18)
print(loc, 22)
ROIs <- data.frame("site_name" = c("Suwon"),
"lat" = c(37.271702955).
"lon" = c(126.98836171))
ROIs <- data.frame("site_name" = c("Suwon"),
"lat" = c(37.271702955),
"lon" = c(126.988361719))
MODproduct = "MOD13Q1"
# See available dates, choose a window
availableDates = mt_dates(MODproduct, ROIs$lat[1], ROIs$lon[1])
head(availableDates)
tail(availableDates)
startDate = "2020-08-28"
endDate = "2020-11-16"
# List available bands
bands = mt_bands(MODproduct)
bands$band
# Useful here are bands 1 (VI quality), 3 (Pixel reliability),
# 6 (NDVI), 8 (Composite day of year) and possibly 11 (EVI),
# depending on your needs. Here we'll ignore EVI.
bandsOfInterest = bands[c(1,3,5,6,8),]$band
bandsOfInterest
# Useful here are bands 1 (VI quality), 3 (Pixel reliability),
# 6 (NDVI), 8 (Composite day of year) and possibly 11 (EVI),
# depending on your needs. Here we'll ignore EVI.
bandsOfInterest = bands[c(1,3,5,6),]$band
bandsOfInterest
# Benchmark the download time
dlStart = Sys.time()
# Batch download MODIS timeseries
VIQ = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[1],
internal = T,
start = startDate,
end = endDate)
PR = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[2],
internal = T,
start = startDate,
end = endDate)
NDVI = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[3],
internal = T,
start = startDate,
end = endDate)
DOY = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[4],
internal = T,
start = startDate,
end = endDate)
dlEnd = Sys.time()
dlEnd - dlStart
bandsOfInterest
str(NDVI)
print(str(NDVI))
View(NDVI)
library(dplyr)
products <- mt_products()
products$product
head(products)
bands <- mt_bands(product = "MOD13Q1")
head(bands)
dates <- mt_dates(product = "MOD13Q1", lat = 37.27, lon = 126.98)
# snu suwon farm 37.2713, 126.9888
head(dates)
dates <- mt_dates(product = "MOD13Q1", lat = 37.27, lon = 126.98)
# snu suwon farm 37.2713, 126.9888
head(dates)
dates <- mt_dates(product = "MOD13Q1", lat = 37.2713, lon =126.9888)
# snu suwon farm 37.2713, 126.9888
head(dates)
dates <- mt_dates(product = "MOD13Q1", lat = 37, lon =127)
# snu suwon farm 37.2713, 126.9888
head(dates)
# snu suwon farm 37.2713, 126.9888
tail(dates)
View(dates)
# download the MODIS land cover (IGBP) and NDVI data
# for a region around the SNU suwon farm
# location 37.272138, 126.988337
suwon_ndvi <- mt_subset(product = "MOD13Q1",
lat = 37.272138,
lon =  126.988337,
band = "ndvi_250m",
start = "2018-01-01",
end = "2020-11-16",
km_lr = 20,
km_ab = 20,
site_name = "suwon",
internal = TRUE,
progress = FALSE)
bands <- mt_bands(product = "MOD13Q1")
head(bands)
# download the MODIS land cover (IGBP) and NDVI data
# for a region around the SNU suwon farm
# location 37.272138, 126.988337
suwon_ndvi <- mt_subset(product = "MOD13Q1",
lat = 37.272138,
lon =  126.988337,
band = bands$band[5],
start = "2018-01-01",
end = "2020-11-16",
km_lr = 20,
km_ab = 20,
site_name = "suwon",
internal = TRUE,
progress = FALSE)
suwon_lc <- mt_subset(product = "MCD12Q1",
lat = 37.272138,
lon =  126.988337,
band = "LC_Type1",
start = "2018-01-01",
end = "2020-11-16",
km_lr = 20,
km_ab = 20,
site_name = "suwon",
internal = TRUE,
progress = FALSE)
# NDVI is number 5
mt_bands(MCD12Q1)$bands
# NDVI is number 5
mt_bands("MCD12Q1")$bands
# NDVI is number 5
mt_bands(products = "MCD12Q1")$bands
# NDVI is number 5
b <- mt_bands(products = "MCD12Q1")
# NDVI is number 5
mt_bands(product = "MCD12Q1")$bands
# NDVI is number 5
mt_bands(product = "MCD12Q1")
# download the MODIS land cover (IGBP) and NDVI data
# for a region around the SNU suwon farm
# location 37.272138, 126.988337
suwon_ndvi <- mt_subset(product = "MOD13Q1",
lat = 37.272138,
lon =  126.988337,
band = "250m_16_days_NDVI",
start = "2018-01-01",
end = "2020-11-16",
km_lr = 20,
km_ab = 20,
site_name = "suwon",
internal = TRUE,
progress = FALSE)
# download the MODIS land cover (IGBP) and NDVI data
# for a region around the SNU suwon farm
# location 37.272138, 126.988337
suwon_ndvi <- mt_subset(product = "MOD13Q1",
lat = 37.272138,
lon =  126.988337,
band = "250m_16_days_NDVI",
start = "2018-01-01",
end = "2020-11-16",
km_lr = 2,
km_ab = 2,
site_name = "suwon",
internal = TRUE,
progress = FALSE)
head(suwon_ndvi)
head(suwon_lc)
ggplot(suwon_ndvi, aes(x = calender_date, y = value)) +
geom_point()
ggplot(suwon_ndvi, aes(x = calendar_date, y = value)) +
geom_point()
LC_r <- mt_to_raster(df = suwon_lc, reproject = TRUE)
plot(LC_r)
View(LC_r)
VI <- suwon_lc
QA <- mt_subset(product = "MCD12Q1",
lat = 37.272138,
lon =  126.988337,
band = "250m_16_days_pixel_reliability",
start = "2018-01-01",
end = "2020-11-16",
km_lr = 2,
km_ab = 2,
site_name = "suwon",
internal = TRUE,
progress = FALSE)
QA <- mt_subset(product = "MCD13Q1",
lat = 37.272138,
lon =  126.988337,
band = "250m_16_days_pixel_reliability",
start = "2018-01-01",
end = "2020-11-16",
km_lr = 2,
km_ab = 2,
site_name = "suwon",
internal = TRUE,
progress = FALSE)
QA <- mt_subset(product = "MOD13Q1",
lat = 37.272138,
lon =  126.988337,
band = "250m_16_days_pixel_reliability",
start = "2018-01-01",
end = "2020-11-16",
km_lr = 2,
km_ab = 2,
site_name = "suwon",
internal = TRUE,
progress = FALSE)
# convert df to raster
VI_r <- mt_to_raster(df = VI)
QA_r <- mt_to_raster(df = QA)
## clean the data
# create mask on pixel reliability flag set all values <0 or >1 NA
m <- QA_r
m[(QA_r < 0 | QA_r > 1)] <- NA # continue working with QA 0 (good data), and 1 (marginal data)
# apply the mask to the NDVI raster
VI_m <- mask(VI_r, m, maskvalue=NA, updatevalue=NA)
# plot the first image
plot(m,1) # plot mask
# plot the first image
plot(m,1) # plot mask
```{r}
plot(VI_m,1) # plot cleaned NDVI raster
# apply the mask to the NDVI raster
VI_m <- mask(VI_r, m, maskvalue=NA, updatevalue=NA)
plot(VI_m,1) # plot cleaned NDVI raster
View(VI)
View(suwon_lc)
View(suwon_ndvi)
View(VI)
View(suwon_ndvi)
library(lubridate)
library(hms)
suwon_ndvi %>% mutate(month = month(calendar_date))
suwon_ndvi <- suwon_ndvi %>% mutate(month = month(calendar_date))
suwon_ndvi %>% group_by(month) %>%
summarise(avg = mean(value))
suwon_ndvi %>% group_by(month) %>%
summarise(avg = mean(value)) %>%
ggplot(aes(month, avg)) + geom_point()
stat_loc <- c(37.45866633045674, 126.94995477951905)
