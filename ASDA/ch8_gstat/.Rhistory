#install.packages("lattice")
#install.packages("sp")
library(lattice)
library(sp)
data(meuse)
head(meuse)
coordinates(meuse) <- c("x","y")
spplot(meuse, "zinc", do.log = T, colorkey = TRUE)
bubble(meuse, "zinc", do.log = T, key.space = "bottom")
# relation between zinc concentration and distance to the river
xyplot(log(zinc) ~ sqrt(dist), as.data.frame(meuse))
zn.lm <- lm(log(zinc) ~ sqrt(dist), meuse)
meuse$fitted.s <- predict(zn.lm, meuse) - mean(predict(zn.lm, meuse))
meuse$residuals <- residuals(zn.lm)
spplot(meuse, c("fitted.s", "residuals"))
# relation between zinc concentration and distance to the river
xyplot(log(zinc) ~ sqrt(dist), as.data.frame(meuse))
zn.lm <- lm(log(zinc) ~ sqrt(dist), meuse)
meuse$fitted.s <- predict(zn.lm, meuse) - mean(predict(zn.lm, meuse))
meuse$residuals <- residuals(zn.lm)
spplot(meuse, c("fitted.s", "residuals"))
data(meuse.grid)
head(meuse.grid)
coordinates(meuse.grid) <- c("x","y")
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame")
head(meuse.grid)
library(gstat)
idw.out <- gstat::idw(zinc ~ 1, meuse, meuse.grid, idp = 2.5)
as.data.frame(idw.out)[1:5,]
zn.lm <- lm(log(zinc) ~ sqrt(dist), meuse)
meuse.grid$pred <- predict(zn.lm, meuse.grid)
meuse.grid$se.fit <- predict(zn.lm, meuse.grid, se.fit = TRUE)$se.fit
## krige function
meuse.lm <- krige(log(zinc) ~ sqrt(dist), meuse, meuse.grid)
## as no variogram, does not krige
```
## polynomial regression
meuse.tr2 <- krige(log(zinc) ~ 1, meuse, meuse.grid,
degree = 2)
## using lm ftn
lm(log(zinc) ~ I(x^2) + I(y^2) + I(x*y)+x+y, meuse)
#or
lm(log(zinc) ~ poly(x,y, degree = 2), meuse)
hscat(log(zinc) ~ 1, meuse, (0:9) *100)
?hscat
variogram(log(zinc) ~ 1, meuse, cloud = TRUE)
variogram(log(zinc) ~ 1, meuse, cloud = TRUE)
plot(variogram(log(zinc) ~ 1, meuse, cloud = TRUE))
sel <- plot(variogram(log(zinc) ~ 1, meuse, cloud = TRUE),
digitize = TRUE) #digitize an area
### R code from vignette source 'geos.Rnw'
### Encoding: UTF-8
# data: m1m2.R
###################################################
### code chunk number 1: geos.Rnw:8-19
###################################################
require(RColorBrewer)
###################################################
### code chunk number 30: geos.Rnw:789-790
###################################################
plot(variogram(log(zinc) ~ 1, meuse, alpha = c(0, 45, 90, 135)))
plot(variogram(log(zinc) ~ 1, meuse, alpha = c(0, 45, 90, 135)))
plot(variogram(log(zinc) ~ 1, meuse, alpha = seq(0,170,10)))
plot(variogram(log(zinc) ~ 1, meuse))
plot(variogram(log(zinc) ~ 1, meuse, cloud = TRUE))
plot(variogram(log(zinc) ~ 1, meuse, cutoff=1000, width=50))
# or we can set non-regular intervals
plot(variogram(log(zinc) ~ 1, meuse, boundaries = c(0,50,100, seq(250,1500,250))
# or we can set non-regular intervals
plot(variogram(log(zinc) ~ 1, meuse, boundaries = c(0,50,100, seq(250,1500,250))))
# or we can set non-regular intervals
plot(variogram(log(zinc) ~ 1, meuse, boundaries = c(0,50,100, seq(250,1500,250)))
# or we can set non-regular intervals
plot(variogram(log(zinc) ~ 1, meuse, boundaries = c(0,50,100, seq(250,1500,250))))
# or we can set non-regular intervals
plot(variogram(log(zinc) ~ 1, meuse, boundaries = c(0,50,100, seq(250,1500,250))))
show.vgms()
show.vgms(model = "Mat", kappa.range = c(0.1,0.2,0.5,1,2,5,10), max=10)
show.vgms()
vgm(1, "Sph",300)
vgm(1, "Sph",300,0.5)
v1 <- vgm(1, "Sph",300,0.5)
v1 <- vgm(1, "Sph",300,0.5)
v2 <- vgm(0.8, "Sph", 800)
v2
v2 <- vgm(0.8, "Sph", 800, add.to = v1)
vgm(1, "Sph",300,0.5)
vgm(0.5, "Nug",0)
# example
vgm()
# example
head(vgm())
v <- variogram(log(zinc) ~ 1, meuse)
plot(v)
vgm(1, "Sph", 800,1)
vgm(1, "Sph",300,0.5)
v2
vgm(0.7, "Mat",2)
vgm(0.7, "Sph",2)
vgm(0.7, "Sph",200,2)
vgm(1, "Sph", 800,1)
fit.variogram(v, vgm(1, "Sph", 800,1))
fit.variogram(v, vgm(1, "Sph", 10,1))
fit.variogram(v, vgm(1, "Sph", 800, 0.06), fit.sills = c(FALSE, TRUE)) # fitting only "Sph" model
###################################################
### code chunk number 44: geos.Rnw:1207-1215
###################################################
v.dir <- variogram(log(zinc)~1,meuse,alpha=(0:3)*45)
v.anis <- vgm(.6, "Sph", 1600, .05, anis=c(45,.3))
print(plot(v.dir, v.anis, pch=3))
v.dir <- variogram(log(zinc) ~ 1, meuse, alpha = (0:3)*45)
v.fit <- fit.variogram(v.dir, vgm(0.6, "Sph", 800,0.6))
plot(v.dir, v.fit)
v.anis <- vgm(.6, "Sph", 1600, .05, anis=c(45,.3))plot(v.dir, v.fit)
v.anis <- vgm(.6, "Sph", 1600, .05, anis=c(45,.3))
plot(v.dir, v.fit)
v.dir <- variogram(log(zinc) ~ 1, meuse, alpha = (0:3)*45)
v.anis <- vgm(.6, "Sph", 1600, .05, anis=c(45,.3))
plot(v.dir, v.fit)
setwd("C:/Users/joych/Desktop/SS/Textbook/ch8. IG")
remove.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(lattice)
library(sp)
coordinates(meuse) <- c("x","y")
data(meuse)
head(meuse)
coordinates(meuse) <- c("x","y")
spplot(meuse, "zinc", do.log = T, colorkey = TRUE)
bubble(meuse, "zinc", do.log = T, key.space = "bottom")
spplot(meuse, "zinc", do.log = T, colorkey = TRUE)
?ssplot()
?ssplot
?spplot
# relation between zinc concentration and distance to the river
xyplot(log(zinc) ~ sqrt(dist), as.data.frame(meuse))
spplot(meuse, c("fitted.s", "residuals"))
zn.lm <- lm(log(zinc) ~ sqrt(dist), meuse)
meuse$fitted.s <- predict(zn.lm, meuse) - mean(predict(zn.lm, meuse))
meuse$residuals <- residuals(zn.lm)
spplot(meuse, c("fitted.s", "residuals"))
zn.lm <- lm(log(zinc) ~ sqrt(dist), meuse)
meuse$fitted.s <- predict(zn.lm, meuse) - mean(predict(zn.lm, meuse))
meuse$residuals <- residuals(zn.lm)
spplot(meuse, c("fitted.s", "residuals"))
library(gstat)
idw.out <- gstat::idw(zinc ~ 1, meuse, meuse.grid, idp = 2.5) # idp = 2.5
as.data.frame(idw.out)[1:5,]
zn.lm <- lm(log(zinc) ~ sqrt(dist), meuse)
meuse.grid$pred <- predict(zn.lm, meuse.grid)
meuse.grid$se.fit <- predict(zn.lm, meuse.grid, se.fit = TRUE)$se.fit
meuse.grid$se.fit
meuse.grid$pred
meuse
head(meuse)
tibble(meuse)
library(dplyr)
tibble(meuse)
tibble(meuse.grid)
data(meuse.grid)
tibble(meuse.grid)
head(meuse.grid$pred)
## krige function
meuse.lm <- krige(log(zinc) ~ sqrt(dist), meuse, meuse.grid)
# Produce h-scatterplot
hscat(log(zinc) ~ 1, meuse, (0:9) *100) # grouped according to their distances
# Produce h-scatterplot
hscat(log(zinc) ~ 1, meuse, (0:9) *100, labs  = "lagged scatterplot") # grouped according to their distances
plot(variogram(log(zinc) ~ 1, meuse, cloud = TRUE))
# Produce h-scatterplot
hscat(log(zinc) ~ 1, meuse, (0:9) *100) # grouped according to their distances
tibble(meuse)
tibble(meuse.grid)
head(meuse)
meuse.grid
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame")
meuse.grid
meuse
head(meuse)
tibble(meuse.grid)
data("meuse")
data(meuse)
meuse
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame") # convert data.frame into a SpatialPixelsDataFrame
class(meuse.grid)
as.data.frame(idw.out)[1:5,]
meuse$x==181180
nrow(meuse)
nrow(meuse.grid)
plot(variogram(log(zinc) ~ 1, meuse, cloud = TRUE))
plot(variogram(log(zinc) ~ 1, meuse, cloud = TRUE))
data(meuse.grid) # provides coordinate points on a regular grid
tibble(meuse.grid)
coordinates(meuse.grid) <- c("x","y") # assign a coordinate
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame") # convert data.frame into a SpatialPixelsDataFrame
# assign coordinates
coordinates(meuse) <- c("x","y")
plot(variogram(log(zinc) ~ 1, meuse, cloud = TRUE))
plot(variogram(log(zinc) ~ 1, meuse))
#           v = variogram(log(random) ~ 1, meuse)
#           trellis.focus("panel", 1, 1, highlight = FALSE)
#           llines(v$dist, v$gamma, col = 'grey')
#           trellis.unfocus()
#        }
#}
#fn()
#trellis.focus("panel", 1, 1, highlight = FALSE)
#lpoints(v$dist, v$gamma, col = 'black', type = 'b', lwd = 2, pch=3)
#trellis.unfocus()
print(xyplot(gamma ~ dist, v, pch = 3, type = 'b', lwd = 2, col = 'darkblue',
panel = function(x, y, ...) {
for (i in 1:100) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
llines(v$dist, v$gamma, col = 'grey')
}
panel.xyplot(x, y, ...)
},
ylim = c(0, 0.75), xlab = 'distance', ylab = 'semivariance'
))
###################################################
### code chunk number 28: geos.Rnw:726-758
###################################################
v <- variogram(log(zinc) ~ 1, meuse)
# INTERACTIVE mode out-commented:
plot(v, type = 'b', pch = 3)
fn = function(n = 100) {
for (i in 1:n) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
trellis.focus("panel", 1, 1, highlight = FALSE)
llines(v$dist, v$gamma, col = 'grey')
trellis.unfocus()
}
}
v <- variogram(zinc ~ 1, meuse, cloud = TRUE)
v$gamma <- v$gamma/1e6
sel$y <- sel$y/1e6
p1 <- xyplot(gamma~dist, v,
panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
llines(sel$x, sel$y, col = 'red')
},
pch=3, cex = .5, asp = 1, ylab = "gamma (x 1e6)")
x <-
structure(list(head = c(40, 40, 40, 54, 55, 54, 47, 80, 55, 55,
54, 53, 54, 55, 59, 59), tail = c(41, 42, 43, 57, 57, 58, 59,
99, 121, 122, 123, 125, 125, 125, 125, 132)), .Names = c("head",
"tail"), row.names = as.integer(c(NA, 16)), class = c("pointPairs",
"data.frame"))
p2 = plot(x, meuse, scales=list(draw=F), col.line = 'red')
print(p1, split = c(1,1,2,1), more = TRUE)
print(p2, split = c(2,1,2,1))
cld <- variogram(log(zinc) ~ 1, meuse, cloud = TRUE)
cld
nrow(meuse)
155*155
svgm <- variogram(log(zinc) ~ 1, meuse)
svgm
plot(d)
d <- data.frame(gamma = c(cld$gamma, svgm$gamma),
dist = c(cld$dist, svgm$dist),
id = c(rep("cloud", nrow(cld)), rep("sample variogram", nrow(svgm)))
)
plot(d)
xyplot(gamma ~ dist | id, d,
scales = list(y = list(relation = "free",
#ylim = list(NULL, c(-.005,0.7)))),
limits = list(NULL, c(-.005,0.7)))),
layout = c(1, 2), as.table = TRUE,
panel = function(x,y, ...) {
if (panel.number() == 2)
ltext(x+10, y, svgm$np, adj = c(0,0.5)) #$
panel.xyplot(x,y,...)
},
xlim = c(0, 1590),
cex = .5, pch = 3
)
cld <- variogram(log(zinc) ~ 1, meuse, cloud = TRUE)
svgm <- variogram(log(zinc) ~ 1, meuse)
d <- data.frame(gamma = c(cld$gamma, svgm$gamma),
dist = c(cld$dist, svgm$dist),
id = c(rep("cloud", nrow(cld)), rep("sample variogram", nrow(svgm)))
)
xyplot(gamma ~ dist | id, d,
scales = list(y = list(relation = "free",
#ylim = list(NULL, c(-.005,0.7)))),
limits = list(NULL, c(-.005,0.7)))),
layout = c(1, 2), as.table = TRUE,
panel = function(x,y, ...) {
if (panel.number() == 2)
ltext(x+10, y, svgm$np, adj = c(0,0.5)) #$
panel.xyplot(x,y,...)
},
xlim = c(0, 1590),
cex = .5, pch = 3
)
head(cld)
head(cld);head(scgm)
head(cld);head(svgm)
sel <- plot(variogram(log(zinc) ~ 1, meuse, cloud = TRUE),
digitize = TRUE)
###################################################
### code chunk number 28: geos.Rnw:726-758
###################################################
v <- variogram(log(zinc) ~ 1, meuse)
#INTERACTIVE mode out-commented:
plot(v, type = 'b', pch = 3)
fn = function(n = 100) {
for (i in 1:n) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
trellis.focus("panel", 1, 1, highlight = FALSE)
llines(v$dist, v$gamma, col = 'grey')
trellis.unfocus()
}
}
fn()
trellis.focus("panel", 1, 1, highlight = FALSE)
lpoints(v$dist, v$gamma, col = 'black', type = 'b', lwd = 2, pch=3)
trellis.unfocus()
print(xyplot(gamma ~ dist, v, pch = 3, type = 'b', lwd = 2, col = 'darkblue',
panel = function(x, y, ...) {
for (i in 1:100) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
llines(v$dist, v$gamma, col = 'grey')
}
panel.xyplot(x, y, ...)
},
ylim = c(0, 0.75), xlab = 'distance', ylab = 'semivariance'
))
v <- variogram(log(zinc) ~ 1, meuse)
#INTERACTIVE mode out-commented:
plot(v, type = 'b', pch = 3)
fn = function(n = 100) {
for (i in 1:n) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
trellis.focus("panel", 1, 1, highlight = FALSE)
llines(v$dist, v$gamma, col = 'grey')
trellis.unfocus()
}
}
fn()
trellis.focus("panel", 1, 1, highlight = FALSE)
lpoints(v$dist, v$gamma, col = 'black', type = 'b', lwd = 2, pch=3)
trellis.unfocus()
print(xyplot(gamma ~ dist, v, pch = 3, type = 'b', lwd = 2, col = 'darkblue',
panel = function(x, y, ...) {
for (i in 1:100) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
llines(v$dist, v$gamma, col = 'grey')
}
panel.xyplot(x, y, ...)
},
ylim = c(0, 0.75), xlab = 'distance', ylab = 'semivariance'
))
print(xyplot(gamma ~ dist, v, pch = 3, type = 'b', lwd = 2, col = 'darkblue',
panel = function(x, y, ...)
for (i in 1:100) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
llines(v$dist, v$gamma, col = 'grey')
}
panel.xyplot(x, y, ...)
},
ylim = c(0, 0.75), xlab = 'distance', ylab = 'semivariance'
))
plot(variogram(log(zinc)~1, meuse, alpha = (0:3)*45))
plot(variogram(log(zinc) ~ 1, meuse, alpha = seq(0,170,10))) # noise increase, as number of data decr.
plot(variogram(log(zinc) ~ 1, meuse, cutoff=1000, width=50)) #1000/50=20, 20points appear
# or we can set non-regular intervals
plot(variogram(log(zinc) ~ 1, meuse, boundaries = c(0,50,100, seq(250,1500,250))))
v <- variogram(log(zinc) ~ 1, meuse)
plot(v) # spherical model might be a reasonable choice
fit.variogram(v, vgm(1, "Sph", 800,1)) # proper initial value
fit.variogram(v, vgm(1, "Sph", 10,1)) # far from reasonable values. #singular model
v <- variogram(log(zinc) ~ 1, meuse)
plot(v) # spherical model might be a reasonable choice
fit.variogram(v, vgm(1, "Sph", 800,1)) # proper initial value
fit.variogram(v, vgm(1, "Sph", 10,1)) # far from reasonable values. #singular model
```{r}
fit.variogram(v, vgm(1, "Sph", 800, 0.06), fit.sills = c(FALSE, TRUE)) # fitting only "Sph" model
v.dir <- variogram(log(zinc) ~ 1, meuse, alpha = (0:3)*45)
v.anis <- vgm(.6, "Sph", 1600, .05, anis=c(45,.3))
plot(v.dir, v.anis)
library(geoR)
install.packages("geoR")
library(geoR)
v.eye <- eyefit(variog(as.geodata(meuse["zinc"]), max.dist = 1500))
fit.variogram.reml(log(zinc) ~ 1, meuse, model = vgm(0.6, "Sph", 800, 0.06))
data(meuse.grid) # provides coordinate points on a regular grid
head(meuse.grid)
v <- variogram(log(zinc) ~ 1, meuse)
#INTERACTIVE mode out-commented:
plot(v, type = 'b', pch = 3)
fn = function(n = 100) {
for (i in 1:n) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
trellis.focus("panel", 1, 1, highlight = FALSE)
llines(v$dist, v$gamma, col = 'grey')
trellis.unfocus()
}
}
fn()
trellis.focus("panel", 1, 1, highlight = FALSE)
lpoints(v$dist, v$gamma, col = 'black', type = 'b', lwd = 2, pch=3)
trellis.unfocus()
print(xyplot(gamma ~ dist, v, pch = 3, type = 'b', lwd = 2, col = 'darkblue',
panel = function(x, y, ...) {
for (i in 1:100) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
llines(v$dist, v$gamma, col = 'grey')
}
panel.xyplot(x, y, ...)
},
ylim = c(0, 0.75), xlab = 'distance', ylab = 'semivariance'
))
v <- variogram(log(zinc) ~ 1, meuse)
#INTERACTIVE mode out-commented:
plot(v, type = 'b', pch = 3)
fn = function(n = 100) {
for (i in 1:n) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
trellis.focus("panel", 1, 1, highlight = FALSE)
llines(v$dist, v$gamma, col = 'grey')
trellis.unfocus()
}
}
fn()
trellis.focus("panel", 1, 1, highlight = FALSE)
lpoints(v$dist, v$gamma, col = 'black', type = 'b', lwd = 2, pch=3)
