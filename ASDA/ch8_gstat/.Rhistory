knitr::opts_knit$set(root.dir ="./SC/sc20-hw-SeoyeonCha/hw1" )
setwd("C:/Users/joych/Desktop/SS/Textbook/ch8_gstat")
setwd("C:/Users/joych/Desktop/SS/Textbook/ch8_gstat")
setwd("C:/Users/joych/Desktop/SS/SpatialStat20/ASDA/ch8_gstat")
knitr::opts_knit$set(root.dir ="C:/Users/joych/Desktop/SS/Textbook/ch8_gstat")
## package installation
library(lattice)
library(sp)
data(meuse)
head(meuse)
# assign coordinates
coordinates(meuse) <- c("x","y")
data(meuse)
head(meuse)
# assign coordinates
coordinates(meuse) <- c("x","y")
* Zinc concentration을 공간 위에 그린 그림:
* `spplot()`: spatial data plotting
```{r}
par(mfrow = c(1,2))
# plotting it in 2 ways
spplot(meuse, "zinc", do.log = T, colorkey = TRUE)
bubble(meuse, "zinc", do.log = T, key.space = "bottom")
```
* Zinc 농도와 거리 간의 관계를 알고 싶다.
* 반비례 관계가 발견된다.
```{r}
# relation between zinc concentration and distance to the river
xyplot(log(zinc) ~ sqrt(dist), as.data.frame(meuse))
```
* Use `lm()` function for regression.
```{r}
zn.lm <- lm(log(zinc) ~ sqrt(dist), meuse)
meuse$fitted.s <- predict(zn.lm, meuse) - mean(predict(zn.lm, meuse))
meuse$residuals <- residuals(zn.lm)
spplot(meuse, c("fitted.s", "residuals"))
```
* Residuals -> seems spatially correlated, it is not a white noise.
* Residuals with a similar value occur regularly close to another.
### 8.3 Non-geostatistical Interpolation Methods
* interpolation is done on a regular grid.
```{r}
data(meuse.grid) # provides coordinate points on a regular grid
head(meuse.grid)
coordinates(meuse.grid) <- c("x","y") # assign a coordinate
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame") # convert data.frame into a SpatialPixelsDataFrame
```
data(meuse.grid) # provides coordinate points on a regular grid
head(meuse.grid)
coordinates(meuse.grid) <- c("x","y") # assign a coordinate
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame") # convert data.frame into a SpatialPixelsDataFrame
library(gstat)
idw.out <- gstat::idw(zinc ~ 1, meuse, meuse.grid, idp = 2.5) # idp = 2.5
as.data.frame(idw.out)[1:5,]
# var1.pred, var1.var(=NA, becuase inverse distance does not provide prediction error variances)
library(gstat)
idw.out <- gstat::idw(zinc ~ 1, meuse, meuse.grid, idp = 2.5) # idp = 2.5
as.data.frame(idw.out)[1:5,]
# var1.pred, var1.var(=NA, becuase inverse distance does not provide prediction error variances)
zn.lm <- lm(log(zinc) ~ sqrt(dist), meuse)
meuse.grid$pred <- predict(zn.lm, meuse.grid)
## krige function
meuse.lm <- krige(log(zinc) ~ sqrt(dist), meuse, meuse.grid)
## polynomial regression
meuse.tr2 <- krige(log(zinc) ~ 1, meuse, meuse.grid,
degree = 2)
# Produce h-scatterplot
hscat(log(zinc) ~ 1, meuse, (0:9) *100) # grouped according to their distances
cld <- variogram(log(zinc) ~ 1, meuse, cloud = TRUE) # ~1: spatially constant mean coefficient
svgm <- variogram(log(zinc) ~ 1, meuse)
head(cld) # computes gamma for each distance
head(svgm) # np: # of points
d <- data.frame(gamma = c(cld$gamma, svgm$gamma),
dist = c(cld$dist, svgm$dist),
id = c(rep("cloud", nrow(cld)), rep("sample variogram", nrow(svgm)))
)
xyplot(gamma ~ dist | id, d,
scales = list(y = list(relation = "free",
#ylim = list(NULL, c(-.005,0.7)))),
limits = list(NULL, c(-.005,0.7)))),
layout = c(1, 2), as.table = TRUE,
panel = function(x,y, ...) {
if (panel.number() == 2)
ltext(x+10, y, svgm$np, adj = c(0,0.5)) #$
panel.xyplot(x,y,...)
},
xlim = c(0, 1590),
cex = .5, pch = 3
)
v <- variogram(log(zinc) ~ 1, meuse)
#INTERACTIVE mode out-commented:
plot(v, type = 'b', pch = 3)
fn = function(n = 100) {
for (i in 1:n) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
trellis.focus("panel", 1, 1, highlight = FALSE)
llines(v$dist, v$gamma, col = 'grey')
trellis.unfocus()
}
}
fn()
trellis.focus("panel", 1, 1, highlight = FALSE)
lpoints(v$dist, v$gamma, col = 'black', type = 'b', lwd = 2, pch=3)
v <- variogram(log(zinc) ~ 1, meuse)
#INTERACTIVE mode out-commented:
plot(v, type = 'b', pch = 3)
fn = function(n = 100) {
for (i in 1:n) {
meuse$random = sample(meuse$zinc)
v = variogram(log(random) ~ 1, meuse)
trellis.focus("panel", 1, 1, highlight = FALSE)
llines(v$dist, v$gamma, col = 'grey')
trellis.unfocus()
}
}
fn()
trellis.focus("panel", 1, 1, highlight = FALSE)
lpoints(v$dist, v$gamma, col = 'black', type = 'b', lwd = 2, pch=3)
- grey : variograms for randomly re-allocated data
- our sample variogram does not include in this region, so that we reject the possibility of complete spatial randomness
#### Directional sample variogram with `alpha()` (include angle information)
```{r}
plot(variogram(log(zinc)~1, meuse, alpha = (0:3)*45))
plot(variogram(log(zinc) ~ 1, meuse, alpha = seq(0,170,10))) # noise increase, as number of data decr.
```
plot(variogram(log(zinc) ~ 1, meuse, alpha = (0:3)*45))
plot(variogram(log(zinc) ~ 1, meuse, alpha = seq(0,170,10))) # noise increase, as number of data decr.
plot(variogram(log(zinc) ~ 1, meuse, cutoff=1000, width=50)) #1000/50=20, 20points appear
# or we can set non-regular intervals
plot(variogram(log(zinc) ~ 1, meuse, boundaries = c(0,50,100, seq(250,1500,250))))
show.vgms(model = "Mat", kappa.range = c(0.1,0.2,0.5,1,2,5,10), max=10) #Matern class models
show.vgms()
# example
head(vgm()) # list of models
show.vgms(model = "Sph")
plot(variogram(log(zinc) ~ 1, meuse, cutoff=1000, width=50)) #1000/50=20, 20points appear
cld <- variogram(log(zinc) ~ 1, meuse, cloud = TRUE) # ~1: spatially constant mean coefficient
cld
plot(cld)
plot(svgm)
# Exp, Sph, Gau, Mat, Pow commonly used, with or without nugget
vgm(1, "Sph",300)
vgm(1, "Sph",300,0.5)
v1 <- vgm(1, "Sph",300,0.5)
v2 <- vgm(0.8, "Sph", 800, add.to = v1) # add.to v1
v2
vgm(0.5, "Nug",0)
v <- variogram(log(zinc) ~ 1, meuse)
plot(v) # spherical model might be a reasonable choice
plot(v) # spherical model might be a reasonable choice
plot(v) # spherical model might be a reasonable choice
fit.variogram(v, vgm(1, "Sph", 800,1)) # proper initial value
show.vgms(model = "Sph")
vgm(1, "Sph", 800,1)
fit.variogram(v, vgm(1, "Sph", 800,1)) # proper initial value
plot(v) # spherical model might be a reasonable choice
fit.variogram(v, vgm(1, "Sph", 10,1)) # far from reasonable values. #singular model
fit.variogram(v, vgm(1, "Sph", 800, 0.06), fit.sills = c(FALSE, TRUE)) # fitting only "Sph" model
fit.variogram.reml(log(zinc) ~ 1, meuse, model = vgm(0.6, "Sph", 800, 0.06))
v.dir <- variogram(log(zinc) ~ 1, meuse, alpha = (0:3)*45)
v.anis <- vgm(.6, "Sph", 1600, .05, anis=c(45,.3))
plot(v.dir, v.anis)
v.dir <- variogram(log(zinc) ~ 1, meuse, alpha = (0:3)*45)
v.anis <- vgm(.6, "Sph", 1600, .05, anis=c(45,.3))
plot(v.dir, v.anis)
plot(variogram(log(zinc) ~ 1, meuse, map = TRUE, cutoff = 1000, width = 100))
meuse
head(meuse)
g <- gstat(NULL, "logCd", log(cadium) ~ 1, meuse)
g <- gstat(g, "logCu", log(copper) ~ 1, meuse)
g <- gstat(g, "logPb", log(lead) ~ 1, meuse)
g <- gstat(g, "logZn", log(zinc) ~ 1, meuse)
g
vm <- variogram()g
vm <- variogram(g)
vm <- variogram(g)
g <- c()
# data ordering
g <- gstat(NULL, "logCd", log(cadmium) ~ 1, meuse)
g <- gstat(g, "logCu", log(copper) ~ 1, meuse)
g <- gstat(g, "logPb", log(lead) ~ 1, meuse)
g <- gstat(g, "logZn", log(zinc) ~ 1, meuse)
g
vm <- variogram(g)
vgm(1, "Sph", 800, 1)
vm.fit <- fit.lmc(vm, g, vgm(1, "Sph", 800, 1))
plot(vm.fit)
plot(vm, vm.fit)
cor(as.data.frame(meuse)[c("cadmium", "copper", "lead", "zinc")])
variogram(log(zinc) ~ sqrt(dist), meuse)
plot(log(zinc), sqrt(dist))
plot(log(zinc), sqrt(dist), meuse)
plot(log(zinc), sqrt(dist), data = meuse)
plot(log(meuse$zinc), sqrt(meuse$dist))
f <- log(zinc) ~ sqrt(dist)
f
vt <- variogram(f, meuse)
vt
plot(Vt)
vt <- variogram(f, meuse)
plot(Vt)
plot(variogram(f, meuse))
vt.fit <- fit.variogram(vt, vgm(1, "Exp", 300, 1))
vt.fit
vgm(1, "Exp", 300, 1)
g.wls <- gstat(NULL, "log-zinc", f, meuse, model = vt.fit,
set = list(gls = 1))
g.wls
(variogram(g.wls)$gamma - vt$gamma) / mean(vt$gamma)
